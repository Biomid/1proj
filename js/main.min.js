document.addEventListener('DOMContentLoaded', () => {
    'use strict'

    const questions = [
        {
            question: "Еңбек демалысын қалай, қайда өткізгіңіз келеді?",
            answers: [
                "Күйбеңнен алыстап, оңашада өткізгім келеді", 
                "Саяхаттаймын, қыдырамын, жол жүремін", 
                "Жауап беруге қиналамын", 
                "Демалыста ерекше бірнәрсемен айналысуым керек"
            ],
            image: "images/q1.png"
        },
        {
            question: "Бүгін жұмыстан ертерек жіберді, сіз не істейсіз?",
            answers: [
                "Жақсы болды. Оңаша қалып, демаламын.",
                "Жаңадан дүкен ашылды, бірден соған барамын", 
                "Әдеттегідей үйге қайтамын", 
                "Алақай! Серуендеймін, қыдырамын"
            ],
            image: "images/q2.png"
        },
        {
            question: "Көптен көріспеген достарыңыз кездесуге шақырды. Онда сізге ұнайтын қызықтар болатынын айтты. Барасыз ба?",
            answers: [
                "Көп адам жиналған жерді ұнатпаймын. Үйде қаламын.", 
                "Мені қандай қызық күтіп тұрғанын қайта-қайта сұраймын.", 
                "Жауап беруге қиналамын",
                "Әрине, барамын. Шақырған жерден қалмау керек."
            ],
            image: "images/q3.png"
        },
        {
            question: "Табысыңыздың қанша бөлігі қыдыру мен демалуға кетеді?",
            answers: [
                "Қыдыруға көп жұмсамаймын.", 
                "Табысымның көп бөлігін қыдыруға жұмсаймын. Тіпті қарыз алып та қыдырамын.", 
                "Әр кезде әрқалай. Кіммен қыдырғаныма байланысты",
                "Менің табысым тек менікі. Қалай жұмсасам да өзіме ұнайды"
            ],
            image: "images/q4.png"
        },
        {
            question: "Туған күніңізді қалай атап өткенді ұнатасыз?",
            answers: [
                "Әдеттегідей үйде, тек жақындарымның ортасында", 
                "Әр туған күнім ерекше өтуі керек. Жылда өзгеше нәрсе ұйымдастыруға тырысамын, көп сыйлық пен тілектер күтемін", 
                "Туған күнге көп дайындалмаймын. Не істейтінімді сол күні шешемін",
                "Туф, сол да сөз болып па?"
            ],
            image: "images/q5.png"
        },
        {
            question: "Қыдырудан жалығасыз ба?",
            answers: [
                "Иә, әсіресе көп адаммен уақыт өткізуден жалығамын",
                "Жаңа нәрселер жиі болса, жалықпас едім",
                "Қыдырудан жалыққан емеспін",
                "Жалыққаны несі? Қыдырудан неге жалығуым керек?"
            ],
            image: "images/q6.png"
        },
        {
            question: "Сізге қалаған жеріңізге баруға болады десе, қай жерді таңдайсыз?",
            answers: [
                "Ешқайда барғым келмейді. Маған қазір тұрған жерім жайлы",
                "Өзім армандап жүрген жерді айтып, мүмкіндікті барынша пайдаланамын",
                "Таңдауға қиналамын",
                "Білмеймін. Көп қой. Баратын күні көңіліме жаққанын таңдаймын"
            ],
            image: "images/q7.png"
        },
        {
            question: "Жақындарыңыздың ішінде кіммен уақыт өткізгенді ұнатасыз?",
            answers: [
                "Өзіммен өзім қалғанды ұнатамын",
                "Достарыммен",
                "Отбасыммен",
                "Әрдайым жаңа адамдармен танысқан ұнайды"
            ],
            image: "images/q8.png"
        },
        {
            question: "Сіз үшін мыналардың қайсы жаңа?",
            answers: [
                "Бір адаммен танысу",
                "Күнді арнайы жоспарлап, бір күн бойы қыдыру",
                "Әлеуметтік желіде достасу",
                "Шетелге саяхаттау"
            ],
            image: "images/q9.png"
        },
        {
            question: "Сізге телефонмен сөйлескен ұнай ма әлде sms жазған ұнай ма?",
            answers: [
                "Сөйлесуді қаламаймын, керек нәрсені жазып жіберемін",
                "Екеуі де қауіпті. Оданша кездескенде айтамын",
                "Әңгімелесушінің қалауына қараймын",
                "Телефонмен сөйлескен ұнайды"
            ],
            image: "images/q10.png"
        }
    ];
    const results = {
        blue: {
            title: 'Көк кәмпит – өмірге құштар',
            text: `Позитив ойлайтын, өмірге жеңіл қарайтын адамсыз. Ортада, командада өзіңізді жайлы сезінесіз. Әзілқойлығыңыз бар, ойыңыздағыны ойнап жеткізесіз. Эмоционал интеллектіңіз жоғары әрі эмпатсыз. Адамдардың не сезініп тұрғанын жақсы білесіз әрі кімнің кім екенін оңай байқайсыз. 
            <br><br>
            Айналаңыздағы жандарды зерттегенді, танығанды, бақылағанды жақсы көресіз. Адамсыз бір күніңізді де өзкізгіңіз келмейді. Сондықтан көптің ортасында жүріңіз. Жаңа адамдармен танысуға, сөйлесуге болатын жерлерге жиі барыңыз. Мысалы, тренинг, курс, дебат клубы, тіл үйрену клубы және түрлі спорт секциясы. Себебі бұл жерлерде адам көп болады әрі командамен жұмыс істеуге мүмкіндік туады. Сонымен қатар өзіңіздің командаңызды жинай аласыз. Себебі адамдарды жақсы танисыз. Оларға ақыл-кеңес беретін, дамуға көмектесетін менторлық клубыңызды ашуға да болады.
            <br><br>
            Сондықтан сізге жаңалығы көп, еш жалықтырмайтын, қиялыңызға ерік беруге көмектесетін әрі сыр бөлісуге болатын жерге барған абзал. Теңіз жағасында сурет салу, таудың беткейінде кесте тоқу немесе әдемі табиғатта кітап жазу сияқты істер сізге ұнайды. У-шуда достарыңызбен отырсаңыз да, сіздің қолыңыздан стақандарды соғып, музыка жасау келуі ғажап емес. Бастап көріңіз, қиялға ерік берсеңіз, бәрі мүмкін.
            `,
            color: '#0F73E2'
        },
        orange: {
            title: 'Қызғылт сары кәмпит – тұйық',
            text: `Күдікшіл адамсыз. Оптимизмге қарағанда пессимизміңіз басым. Адамдарға оңай ашыла қоймайсыз. Болуы мүмкін оқиғаларды алдын алғанды жақсы көресіз. Бірнәрсеге бармас бұрын мың ойланып, әбден дайындаласыз. Сонымен қатар айналаңызды бақылауда ұстағыңыз келеді. Кейде үрей тудырып, байбалам салып жүруіңіз де мүмкін.
            <br><br>
            Оңаша қалғанды, өзіңізбен-өзіңіз болғанды ұнатасыз. Бұл бір жағынан жақсы. Себебі жалғыздықты ұнататын жандарға арналған сауық, хобби көп. Күнделікті серуендеу, дәмді ас дайындау, аспапта ойнау мен өлең шығарудан бөлек, хайуанаттар бағын жалғыз аралау, қаланы электрсамокатпен жүріп өту, жаңа тіл үйреніп, сол тілде видеода сөйлеу немесе бәрінің шамасы жете бермейтін шыңдарды бағындыру да сіздей жандарға таптырмас істер. Ең бастысы сіз айналысатын іс байсалды болғанын қалайсыз. Алайда бұл жолы ойыңызға бірінші келген нәрсені жасап көруді ұсынамыз. Көп ойланбай, тез таңдау жасап, бірден бастап кеткеніңіз абзал. Көппен бірге жүруді қаламасаңыз, сырыңызды бөлісе алатын адамды ерте шығыңыз. Ал қасыңыздағы адам жылдамырақ әрі қызыққа толы хобби таңдаса, онда сіз мұны міндетті түрде жасап көруіңіз керек. Шыдамыңызды сынап көріңіз. Бұрын істеп көрмеген іс сіздің жаңа хоббиіңізге айналуы ғажап емес.
            `,
            color: '#F96501'
        },
        yellow: {
            title: 'Сары кәмпит – мейірімді',
            text: `Шығармашыл адамсыз. Әсіресе қорқынышты оқиғаларды жазғанды жақсы көруіңіз ғажап емес. Мейірімдісіз, эмпатсыз, оптимиссіз. Кез келген жанға дос бола аласыз, барлық адамнан жақсы нәрсені ғана көресіз. Адамдармен бірге уақыт өткізгенді ұнатасыз. Көп ізденетініңіз бар әрі соны басқаға айтып берген де сізге ұнайды. Өмірдің кез келген сәтінен мән-мағына іздеп, өзіңіз үшін жауап тауып аласыз. Кейде күлкілі көрінуіңіз мүмкін. Бірақ сіз адамдарға жайлы кісісіз. Ойыңдағыңызды жасырмай айта аласыз.
            <br><br>
            Сіз үшін ойын-сауықтың түрі емес, онда кім болатыны және қандай атмосферада өтетіні маңызды. Кез келген ортамен тіл табыса аласыз, сондықтан түрлі топтарға, ұйымдарға, клубтарға қосылып, солармен қыдыруыңызға болады. Себебі тез достасасыз әрі түрлі сезімді бастан кешіргенді ұнатасыз. Тек бір ойын-cауық түрімен шектелмеуіңіз қажет. Тауға шығу, гүл отырғызу, құс ұстап, көбелекпен ойнау, кітап оқу клубын ұйымдастыру – бәрі сізге ұнайтыны сөзсіз.
            `,
            color: '#FFD200'
        },
        red: {
            title: 'Қызыл кәмпит – жыбырлақ',
            text: `Харизмаға толы, ақылды, өзіне сенімді жансыз. Перфекционист болып кететініңіз де бар. Өнерлісіз. Бәлкім ән айтасыз әлде билейсіз. Қолдауды, мақтауды, марапатты жақсы көресіз. Сізді танымалдылыққа жаны құмар адам деуге де болады. Адамдардың ортасында жүргенді қалайсыз. Үнемі өзіңіз туралы айтқыңыз келіп тұрады. Айналаңыздың сіз туралы не дейтіні де сіз үшін өте маңызды.
            <br><br>
            Адамдардың ортасында жүргенді ұнататындықтан сізге жеке қыдырмаған дұрыс. Өзгелерге арнап жеке кешіңізді, шоуыңызды ұйымдастырыңыз немесе белгілі бір өнеріңізді жариялай алатын парақшаңызды ашыңыз. Бар қабілетіңізді өзгеге көрсеткеннен әрі басқалардың қолдауын алғаннан рахаттанасыз. Қандай ойын-cауық түрін таңдасаңыз да, онда сіз маңызды рольде болуыңыз керек. Туған күніңізді ерекше етіп тойлауды кеңес етеміз. Тіпті арнайы актерларды шақыруыңызға болады. Айтпақшы, сізге спа мен массажға, салонға бару да ұнауы керек. Мұндай сыйды өзіңізге ай сайын ұйымдастырып тұрыңыз.
            `,
            color: '#D70001'
        },
        brown: {
            title: 'Қоңыр кәмпит - интеллект',
            text: `Өз өміріңізге қожайынсыз. Интеллектуал әрі білімдісіз. Әділ, турашыл, әлсіздерге көмектескішсіз. Сыртқа суық, қатаңдау, бірақ іштей жұмсақ, мейірімді жансыз. Адамдарда бәрі жақсы болғанын қалайсыз. Оларға бірнәрсе үйреткенді жақсы көресіз. Алайда эмоцияңызды шығаруға, бір сәт босаңсуға ерік бермейсіз. Сондықтан да болар, деректер мен зерттеулер сіздің айнымас досыңыз. 
            <br><br>
            Зерттеулер мен деректерді ұнататын болғандықтан кез келген ойын-cауық пайдалы болса дейсіз. Онда сізге интеллектуал ойындардың кез келген түрін ойнап көруді, дебатқа қатысуды және КВН әзілдерін тамашалауды ұсынамыз. 
            Сонымен қатар өзге адамдарға пайдаңыз тиетіндей кез келген іспен айналысуыңызға болады. Себебі көмектескеніңізден әрі білгеніңізді үйретуден шабыт ала аласыз. Әдетте мұндай жандарға йога, тыныс алу гимнастикасы немесе вальс сияқты баяу билер жақсы келеді. Суда жүзумен де айналысып көріңіз. Сонымен қатар сурет салу, құмыра жасау, аспапта ойнау сияқты шығармашылықты қажет ететін ойын-cауық түрін ұсынамыз. Бұл миыңызды тынықтыруға әрі бір сәт босаңсуға көмектеседі.
            `,
            color: '#552100'
        },
        green: {
            title: 'Жасыл кәмпит – жиһангез',
            text: `Жасыл кәмпиттің ұраны – Жарқырап жүретінім сонша, көлеңке түсіруге уақытым жоқ. Сіз жарқырағанды жақсы көресіз, ашықсыз. Ешкімге зияны жоқ ойын-cауық үшін бас қатырмайсыз, қалағаныңызша көңіл көтере аласыз. Өзгелерді де қыдыруға тарта алатын қабілетіңіз бар. Идеал болмауды қалыпты нәрсе деп қабылдайсыз.
            Достарыңызды барынша қолдайсыз, көмектесесіз. Өмір сүру, үйрену, алға жүру – сіздің өмірлік қағидаңыз. Әр кез белгісіз әрі біртүрлі нәрселерді ойлай беру сізге ұнамайды. Сондықтан да алға қарай жүре беруді, толыққанды өмір сүруді қолдайсыз.
            <br><br>
            Осыған дейін бірнеше елге әлде қалаға барып, саяхаттап үлгерген шығарсыз. Серуен мен саяхат кезінде өзіңізді өте жайлы сезінесіз. Сізге мына ойын сауық түрлерін ұсына аламыз: парашюттан секіру, дайвинг, өзіңіз үшін мәдениеті мен тұрмыс-салты белгісіз елге саяхаттау. Сонымен қатар әдетте адамдар жазда айналысатын іспен қыста, ал суық кезде айналысатын іспен күн жылыда айналысып көріңіз. Өзіңіздей жаңашылдыққа жаны құмар адамға ұнауы керек. Сіздей адамдар бір істен тез жалығуы мүмкін. Сондықтан бастаған нәрсені тастап кетпей, аздап шыдам танытуыңыз керек.
            `,
            color: '#04A933'
        }
    }
    const data = {};
    const answers = [];
    const nextPageBtns = document.querySelectorAll('.next-page-btn'),
        questionBtn = document.querySelector('.question__btn'),
        questionBackBtn = document.querySelector('.question__back'),
        questionRadioBtns = document.querySelector('.question__answers'),
        questionForm = document.querySelector('.question__form'),
        againBtn = document.querySelector('.result__btn'),
        creatingForm = document.querySelector('.creating-form'),
        creatingFormBtn = document.querySelector('.creating-form__btn'),
        creatingFormCheckboxes = document.querySelector('.creating-form__checkboxes'),
        video = document.querySelector('.creating__video');
    let questionCount = 0;
    let candyColor = '#0F73E2';
    let testStarted = false;

    // Переход между страницами
    const nextPage = elem => {
        let section = elem.closest('.section');
        section.classList.add('section_hide');
        section.nextElementSibling.classList.remove('section_hide');
    }
    nextPageBtns.forEach(btn => {
        btn.addEventListener('click', e => {
            e.preventDefault()
            nextPage(btn);
        });
    });
    // Сменить видео
    const changeVideo = url => {
        const candyVideoSources = video.querySelectorAll('source');
    
        candyVideoSources.forEach(item => {
            if (item.type === 'video/webm') {
                item.src = `${url}.webm`
            } else if (item.type === 'video/mp4') {
                item.src = `${url}.mp4`
            }
        });

        video.load()
    }
    // Выбор цвета
    const choosingColor = event => {
        let color = event.target.dataset.colorname;
        video.loop = false;
        let videoUrlWithoutFormat = `video/${color}-candy`;
        changeVideo(videoUrlWithoutFormat);
    }
    creatingFormCheckboxes.addEventListener('change', e => {
        choosingColor(e);
    })
    
    // Рендер страниц вопрособ
    const renderQuestion = (count) => {
        const question = document.querySelector('.question__title'),
            options = document.querySelectorAll('.question__answer .custom-radio__text'),
            questionImage = document.querySelector('.question__image img');

        question.textContent = `${count + 1}. ${questions[count].question}`;
        questions[count].answers.forEach((item, index) => {
            options[index].textContent = item;
        });
        questionImage.src = questions[count].image;
        questionBtn.disabled = true;
        questionForm.reset();
    }
    renderQuestion(questionCount)

    // Шкала прогресса
    const showProgress = count => {
        const progressItems = document.querySelectorAll('.progress__item'),
            checkedItems = document.querySelectorAll('.progress__item_checked');
        if (count === 0) {
            let activeLines = document.querySelectorAll('.progress__line_active');
            activeLines.forEach(item => {
                item.classList.remove('progress__line_active');
                item.style.backgroundColor = '#D9C9C4';
            });
            progressItems.forEach((item, index) => {
                if(index !== 0){
                    item.classList.remove('progress__item_checked');
                }
            });
        } else if (checkedItems.length !== count) {
            progressItems[checkedItems.length - 1].classList.remove('progress__item_checked');
            let activeLines = document.querySelectorAll('.progress__line_active');
            activeLines[activeLines.length - 1].classList.remove('progress__line_active');
            activeLines[activeLines.length - 1].style.backgroundColor = '#D9C9C4';
        } else {
            progressItems[count].classList.add('progress__item_checked');
            if (progressItems[count].previousElementSibling.classList.contains('progress__line')) {
                progressItems[count].previousElementSibling.classList.add('progress__line_active');
                progressItems[count].previousElementSibling.style.backgroundColor = candyColor;
            }
        }
    }

    // Запись ответов на вопросы
    const writeAnswers = index => {
        let inputChecked = questionForm.querySelector('input[name="answer"]:checked');
        answers[index] = inputChecked.value;
    }
    // Вычисление результата
    const calcResult = () => {
        let answerNum = 0;
        answers.forEach(item => answerNum += +item);
        if (answerNum >= 35){
            return 'red';
        } else if (answerNum >= 29) {
            return 'brown';
        } else if (answerNum >= 24) {
            return 'green';
        } else if (answerNum >= 19) {
            return 'blue';
        } else if (answerNum >= 15) {
            return 'yellow';
        } else {
            return 'orange';
        }
    }
    // рендер страницы результата
    const renderResult = color => {
        const title = document.querySelector('.result__title'),
            text = document.querySelector('.result__text'),
            img = document.querySelector('.result__image > img'),
            column = document.querySelector('.result__column'),
            line = document.querySelector('.result__line');
        
        title.textContent = results[color].title;
        text.innerHTML = results[color].text;
        img.src = `images/${color}Character.png`;
        column.style.backgroundColor = results[color].color;
        line.style.backgroundColor = results[color].color;
    }

    // Изменение header на странице результата
    const changeHeader = () => {
        if(document.querySelector('.result').classList.contains('section_hide')){
            document.body.prepend(document.querySelector('.header'));
        } else {
            document.querySelector('.result__box').prepend(document.querySelector('.header'));
        }
    }

    // fetch
    const fetching = (data) => {
        try {
            fetch('server.php', {
                method: "POST",
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data),
                keepalive: true
            });
        } catch (error) {
            alert('Ошибка: ' + error)
        }
    };

    //когда пользователь хочет закрыть страницу (и если он находится в стадии прохождения теста), то показываем ему сообщение, дествительно ли он хочет закрыть страницу
    window.addEventListener("beforeunload", (e) => {
        if(testStarted === true) {
            e.preventDefault();
            e.returnValue = '';
        }
    });

    //если же пользователь все-таки решил закрыть страницу (после того, как его словил beforeunload), то отсылаем те результаты, которые есть (ну например пользователь ответил на первые 4 вопроса - их и шлем)
    window.addEventListener("unload", function (e) {
        data.answers = [...answers];
        fetching(data);
    });


    // Переход между вопросами
    // К след.
    const goToNextQuestion = function(e) {
        e.preventDefault();
        writeAnswers(questionCount);
        if(questionCount === questions.length - 1){
            // формируем сттраничку результата
            let colorResult = calcResult();
            data.answers = [...answers];
            data.result = colorResult;
            let formData = new FormData();
            formData.append('data', JSON.stringify(data));
            console.log(formData.get('data'));
            fetching(formData);
            renderResult(colorResult);
            nextPage(this);
            changeHeader();
        } else {
            questionCount++;
            renderQuestion(questionCount);
            showProgress(questionCount);
        }
    }
    questionBtn.addEventListener('click', goToNextQuestion);
    // К пред.
    const goToPrevQuestion = function() {
        if (questionCount === 0) {
            this.closest('.section').classList.add('section_hide');
            this.closest('.section').previousElementSibling.classList.remove('section_hide');
        } else {
            questionCount--;
            renderQuestion(questionCount);
            showProgress(questionCount);
        }
    }
    questionBackBtn.addEventListener('click', goToPrevQuestion);


    // Кнопка disabled пока не выбран ответ
    questionRadioBtns.addEventListener('change', function () {
        questionBtn.disabled = false;
    })

    // Пройти тест еще раз
    const resetAll = function() {
        testStarted = false;
        creatingForm.reset();
        // Ресет кастомного селекта {
        creatingForm.querySelector('.custom-select .select-selected').remove()
        creatingForm.querySelector('.custom-select .select-items').remove()
        renderCustomSelect();
        // }
        creatingFormBtn.disabled = true;
        // Возврат к начальной странице {
        let firstSection = document.querySelectorAll('.section')[0];
        let section = this.closest('.section');
        section.classList.add('section_hide');
        document.querySelector('.header').classList.remove('header_result');
        firstSection.classList.remove('section_hide');
        // }
        // Ставим начальное видео на странице выбора цвета {
        video.loop = false;
        changeVideo('video/static_loop')
        // }
        // Сбрасываем прогресс опросника
        questionCount = 0;
        renderQuestion(questionCount)
        showProgress(questionCount);
        // header брысь на место
        changeHeader();
    }
    againBtn.addEventListener('click', resetAll);


    creatingFormBtn.addEventListener('click', () => {
        const progressItems = document.querySelectorAll('.progress__item');
        testStarted = true;
        data.gender = document.querySelector('input[name="gender"]:checked').value;
        data.age = document.querySelector('select[name="age"]').value;
        candyColor = creatingForm.querySelector('input[name="color"]:checked').dataset.color;
        progressItems.forEach(item => {
            item.querySelector('.progress__item-image').style.backgroundColor = candyColor;
        });
    })
    // блокировака кнопки проверкой заполнения creatingForm
    const checkCreatingForm = function() {
        if (this.querySelector('.custom-select select').value && this.querySelector('input[name="gender"]:checked')?.value && this.querySelector('input[name="color"]:checked')?.value) {
            creatingFormBtn.disabled = false;
        }
    }
    creatingForm.addEventListener('change', checkCreatingForm);
    


    // Кастомный селект
    function renderCustomSelect() {
        var x, i, j, l, ll, selElmnt, a, b, c;
        /* Look for any elements with the class "custom-select": */
        x = document.getElementsByClassName("custom-select");
        l = x.length;
        for (i = 0; i < l; i++) {
            selElmnt = x[i].getElementsByTagName("select")[0];
            ll = selElmnt.length;
            /* For each element, create a new DIV that will act as the selected item: */
            a = document.createElement("DIV");
            a.setAttribute("class", "select-selected");
            a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;
            x[i].appendChild(a);
            /* For each element, create a new DIV that will contain the option list: */
            b = document.createElement("DIV");
            b.setAttribute("class", "select-items select-hide");
            for (j = 1; j < ll; j++) {
                /* For each option in the original select element,
                create a new DIV that will act as an option item: */
                c = document.createElement("DIV");
                c.innerHTML = selElmnt.options[j].innerHTML;
                c.addEventListener("click", function(e) {
                    /* When an item is clicked, update the original select box,
                    and the selected item: */
                    var y, i, k, s, h, sl, yl;
                    s = this.parentNode.parentNode.getElementsByTagName("select")[0];
                    sl = s.length;
                    h = this.parentNode.previousSibling;
                    for (i = 0; i < sl; i++) {
                        if (s.options[i].innerHTML == this.innerHTML) {
                            s.selectedIndex = i;
                            h.innerHTML = this.innerHTML;
                            y = this.parentNode.getElementsByClassName("same-as-selected");
                            yl = y.length;
                            for (k = 0; k < yl; k++) {
                            y[k].removeAttribute("class");
                            }
                            this.setAttribute("class", "same-as-selected");
                            break;
                        }
                    }
                    h.click();
                    checkCreatingForm.call(creatingForm);
                });
                b.appendChild(c);
            }
            x[i].appendChild(b);
            a.addEventListener("click", function(e) {
                /* When the select box is clicked, close any other select boxes,
                and open/close the current select box: */
                e.stopPropagation();
                closeAllSelect(this);
                this.nextSibling.classList.toggle("select-hide");
                this.classList.toggle("select-arrow-active");
            });
        }
    }
    renderCustomSelect();

    function closeAllSelect(elmnt) {
        /* A function that will close all select boxes in the document,
        except the current select box: */
        var x, y, i, xl, yl, arrNo = [];
        x = document.getElementsByClassName("select-items");
        y = document.getElementsByClassName("select-selected");
        xl = x.length;
        yl = y.length;
        for (i = 0; i < yl; i++) {
            if (elmnt == y[i]) {
            arrNo.push(i)
            } else {
            y[i].classList.remove("select-arrow-active");
            }
        }
        for (i = 0; i < xl; i++) {
            if (arrNo.indexOf(i)) {
            x[i].classList.add("select-hide");
            }
        }
    }

    /* If the user clicks anywhere outside the select box,
    then close all select boxes: */
    document.addEventListener("click", closeAllSelect);
});